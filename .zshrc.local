# speedtest
speedtest-connection() {
	time_seconds=$(curl -o/dev/null -sw '%{time_appconnect}' 'https://connectivitycheck.gstatic.com/generate_204')
	printf "%.0fms\n" $((time_seconds * 1000))
}

# wordnet
wn() { while true; do dict -d wn $(read -e); done }

# zsh-insulter
if [ -f /etc/zsh.command-not-found ]; then
	. /etc/zsh.command-not-found
fi

# Xorg
x() { echo "which session?"; read && sx $HOME/.config/sx/sxrc $REPLY; }

# memory usage
memu() {
	local CHECK=" $@"
	[ -z $1 ] || [ "${CHECK#* -}" != "$CHECK" ] && { echo "Usage: memu program [program...]"; return 1; }
	local PIDS=$(pidof "$@")
	test -z "$PIDS" && return 0
	echo "$PIDS" \
		| xargs -I{} ps -p "{}" -o size,vsize,rss,cmd \
		| awk 'NR==1; NR>1 {print $1"K", $2"Ki", $3"K", $4}' \
		| numfmt --header --field 1,3 --from=si --to=si --suffix=B --format %.1f \
		| numfmt --header --field 2 --from=iec-i --to=iec-i --suffix=B --format %.1f \
		| sort -hk3,3 \
		| column -t -R1,2,3 \
		| GREP_COLORS='mt=1;94' egrep --color=always '.*SIZE.*VSZ.*RSS.*CMD.*|$' \
		| GREP_COLORS='mt=1;32' egrep --color=always "KB|KiB|$" \
		| GREP_COLORS='mt=0;33' egrep --color=always 'MB|MiB|$' \
		| GREP_COLORS='mt=1;31' egrep --color=always "GB|GiB|$"
}

# morse code, base64
mbt() {
	echo "morse code base64 enc/dec"
	local NUM_OUTPUT_COLOR=$(shuf -n1 <(echo 3; seq 5 6))
	while true; do
		read input"?$(tput bold)$(tput setf 1)> $(tput sgr0)"
		if [ -z $input ]; then
			local OUTPUT=$(xclip -selection clipboard -o | base64 -d | morse -d)
			echo "$(tput setf $NUM_OUTPUT_COLOR)${OUTPUT}$(tput sgr0)"
		else
			local OUTPUT=$(echo "$input" | morse -e | base64 -w0)
			echo "$OUTPUT" | xclip -selection clipboard
			echo "$(tput setf 2)${OUTPUT}$(tput sgr0)"
		fi
	done
}
mat() {
	if [ -z "$1" ]; then
		echo "convert text into audio file with morse code"
		read input"?> "
		[ -z "$input" ] \
			&& { echo "NO INPUT"; return 0; } \
			|| echo $input \
			| cwwav -o/tmp/cw.wav -f650 -w20 2>/dev/null
		opusenc --quiet /tmp/cw.wav cw_$(date -u +%FT%TZ).opus \
			&& echo $_
	else
		[ ! -f "$1" ] \
			&& { echo "\"$1\" not found"; exit 0; } \
			|| sox $1 -esigned-integer -b16 -r 22050 -t raw - 2>/dev/null \
			| multimon-ng -q -t raw -a MORSE_CW -
	fi
	rm -f /tmp/cw.wav
}

# xbps
#git -C ~/.cache/xlocate.git ls-tree --full-tree -r --name-only HEAD | rev | sed 's/_/ /; s/-/ /' | rev | column -t -R3 | sk --inline-info --layout=reverse-list --preview="git -C \"$HOME/.cache/xlocate.git\" show master:$(echo {1}-{2}_{3})" --preview-window=up:50% -m
fxls() {
	local HEADER="[Enter] Print selected [TAB] Toggle selection [ALT-F] View file [ALT-I] Info [ALT+H] Homepage"
	local REPO="$HOME/.cache/xlocate.git"
	git -C "$REPO" ls-tree --full-tree -r --name-only HEAD | rev | sed 's/_/ /; s/-/ /' | rev | column -t -R3 \
		| sk --inline-info \
			--prompt "pkg > " \
			--layout=reverse-list \
			--preview="git -C \"$REPO\" show master:$(echo {1}-{2}_{3})" \
			--preview-window=up:50% \
			-m \
			--bind "alt-f:execute[ git -C \"$REPO\" show master:$(echo {1}-{2}_{3}) | sk --layout=reverse-list --prompt '{1} > ' ]" \
			--bind "alt-i:execute[ xbps-query -v -R {1} | sk --layout=reverse-list --prompt '{1} > ' ]" \
			--bind 'alt-h:execute-silent[ xdg-open "$(xbps-query -p homepage -R {1})" & ]' \
			${1:+--query "$@"}
}

# stagit viewer
sgview() {
	[ -z "$1" ] \
		&& local URL=$(read -e "?URL: ") \
		|| local URL=$1
	curl --progress-bar "$URL" \
		| sed -n 's|^<a href="#.*" class="line" id=".*">.*</a>||p' \
		| recode html..ascii \
		| bat -n
}
