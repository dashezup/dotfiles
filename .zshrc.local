## completion
source ~/.local/share/zsh/site-functions/_trt && compdef _trt trt

## alias
alias gpg="/usr/bin/gpg2"
alias ssh="TERM=xterm-256color ssh"
alias pc-ssh="TERM=xterm-256color proxychains ssh"
alias bap="bat --style=plain --paging=always"
alias neofetch="USER=user HOSTNAME=hostname /usr/bin/neofetch"
alias screen="TERM=screen screen"
alias diff="diff --color=always"
# Language
alias speak="/usr/bin/trans --brief --theme=random --speak --no-translate --no-init"
alias zh-TW="/usr/bin/trans --interactive --brief --theme=random :zh-TW --no-init"
alias wn="sdict wn"
# Xorg
alias xcopy="xclip -selection clipboard"
# Void Linux
alias sv="doas /usr/bin/sv"
alias vsv="doas /usr/bin/vsv"
alias usv="SVDIR=~/.local/service /usr/bin/sv"
alias uvsv="SVDIR=~/.local/service /usr/bin/vsv"

## plugins
#. /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
. ~/.local/src/github/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh
. /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
. /usr/share/zsh/site-functions/skim-key-bindings.zsh
#. $HOME/.local/share/grc/grc.zsh
#. /usr/share/skim/key-bindings.zsh
. ~/.local/src/github/zsh-z/zsh-z.plugin.zsh

if [ ! -z ${DISPLAY+x} ] ; then
	. /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme
	. $HOME/.p10k.zsh
        POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(dir rbenv vcs)
	#ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=240'
	##ZSH_HIGHLIGHT_STYLES[suffix-alias]='fg=blue,underline'
	##ZSH_HIGHLIGHT_STYLES[precommand]='fg=blue,underline'
	##ZSH_HIGHLIGHT_STYLES[arg0]='fg=blue'
	##ZSH_HIGHLIGHT_STYLES[comment]='fg=239'
	#ZSH_HIGHLIGHT_STYLES[suffix-alias]=fg=32,underline
	#ZSH_HIGHLIGHT_STYLES[precommand]=fg=32,underline
	#ZSH_HIGHLIGHT_STYLES[arg0]=fg=32 # 26
	#ZSH_HIGHLIGHT_STYLES[single-hyphen-option]='fg=38'
	#ZSH_HIGHLIGHT_STYLES[double-hyphen-option]='fg=38'
	#ZSH_HIGHLIGHT_STYLES[default]='fg=38'
	#ZSH_HIGHLIGHT_STYLES[single-quoted-argument-unclosed]='fg=red'
	#ZSH_HIGHLIGHT_STYLES[double-quoted-argument-unclosed]='fg=red'
fi

# SSH Agent
if ! pgrep -u "$USER" ssh-agent > /dev/null; then
	ssh-agent > "$HOME/.ssh/ssh-agent.env" # or "$XDG_RUNTIME_DIR/ssh-agent.env"
fi
if [[ ! "$SSH_AUTH_SOCK" ]]; then
	eval "$(<"$HOME/.ssh/ssh-agent.env")" >/dev/null
fi

## functions
# speedtest
speedtest-socks-connection() {
	local URL="https://www.google.com/generate_204"
	echo 'http_code\ttime_appconnect\ttime_connect\ttime_namelookup\ttime_total'
	repeat 12 curl \
		-x socks5h://127.0.0.1:1080 --output /dev/null --silent \
		--write-out '%{http_code}\t\t%{time_appconnect}\t%{time_connect}\t%{time_namelookup}\t%{time_total}\n' \
		$URL
}
speedtest-socks-speed() {
	curl \
		-x socks5h://127.0.0.1:1080 --silent \
		-o/dev/null --write-out '%{speed_download}' \
		http://speedtest-sgp1.digitalocean.com/10mb.test \
		| numfmt --to=iec-i --suffix=B/s
}
speedtest-connection() {
	#echo 'http_code\ttime_appconnect\ttime_connect\ttime_namelookup\ttime_total'
	#repeat 7 curl --output /dev/null --silent --write-out '%{http_code}\t\t%{time_appconnect}\t%{time_connect}\t%{time_namelookup}\t%{time_pretransfer}\t\t%{time_redirect}\t%{time_starttransfer}\t\t%{time_total}\n' https://connectivitycheck.gstatic.com/generate_204
	local time_seconds=$(curl -o/dev/null -sw '%{time_appconnect}' 'https://connectivitycheck.gstatic.com/generate_204')
	printf "%.0fms\n" $((time_seconds * 1000))
}

dict() {
	/usr/bin/dict $@ \
	| GREP_COLORS='ms=00;30;44' grep --color=always -P '(?<=^From\ ).*(?=\ \[)|$' \
	| GREP_COLORS='ms=01;37' grep --color=always -P '(?<=  )[0-9]\.|$'
}

# https://dict.revised.moe.edu.tw/
dict_revised() {
	dict -d dict_revised_2015 $(read -e) \
	| GREP_COLORS='ms=00;32' grep --color=always "\[形\]\|\[動\]\|\[名\]\|\[助\]\|\[副\]\|$"
}

sdict() {
	local ALL_DICT=$(dict -D | tail -n+2 | cut -d' ' -f2-)
	local COUNT_DICT=$(echo "$ALL_DICT" | wc -l)
	if [ -z "$1" ]; then
		echo "$ALL_DICT" \
			| fzf --layout=reverse --info=inline --height="$COUNT_DICT" --prompt='dict > ' \
			| read DB DICT || return 0
	else
		echo "$ALL_DICT" | while read database dictionary; do
			if [ "$1" = "$database" ]; then
				DB="$database"
				DICT="$dictionary"
				break
			fi
		done
		[ -z "$DB" ] && { echo "Invalid dict db: $1"; return 1; }
	fi
	cut -f1 "/usr/share/dict/${DB}.index" | fzf \
		--layout=reverse \
		--info=inline \
		--prompt="${DICT} > " \
		--preview="dict --database=${DB} {}" \
		--header="[Enter] View | [CTRL+D] Definition | [CTRL+T] Translation | [CTRL+S] Listen" \
		--bind="enter:execute:dict --database=${DB} {} | less -c" \
		--bind="ctrl-d:execute:trans --dictionary --theme=random {} | less -c" \
		--bind="ctrl-t:execute:trans --theme=random :zh-TW {} | less -c" \
		--bind="ctrl-s:execute-silent:trans --speak {}" \
		--preview-window=up,border-bottom
}

# zsh-insulter
if [ -f /etc/zsh.command-not-found ]; then
	. /etc/zsh.command-not-found
fi

# Xorg
x() { echo "which session?"; read && sx $HOME/.config/sx/sxrc $REPLY; }

# memory usage
memu() {
	local CHECK=" $@"
	[ -z $1 ] || [ "${CHECK#* -}" != "$CHECK" ] && { echo "Usage: memu program [program...]"; return 1; }
	local PIDS=$(pidof "$@")
	test -z "$PIDS" && return 0
	echo "$PIDS" \
		| xargs -I{} ps -p "{}" -o size,vsize,rss,cmd \
		| awk 'NR==1; NR>1 {print $1"K", $2"Ki", $3"K", $4}' \
		| numfmt --header --field 1,3 --from=si --to=si --suffix=B --format %.1f \
		| numfmt --header --field 2 --from=iec-i --to=iec-i --suffix=B --format %.1f \
		| sort -hk3,3 \
		| column -t -R1,2,3 \
		| GREP_COLORS='mt=1;94' egrep --color=always '.*SIZE.*VSZ.*RSS.*CMD.*|$' \
		| GREP_COLORS='mt=1;32' egrep --color=always "KB|KiB|$" \
		| GREP_COLORS='mt=0;33' egrep --color=always 'MB|MiB|$' \
		| GREP_COLORS='mt=1;31' egrep --color=always "GB|GiB|$"
}
ps_mem() {
	doas /usr/bin/ps_mem "$@" \
		| GREP_COLORS='mt=1;32' egrep --color=auto --color=always "KB|KiB|$" \
		| GREP_COLORS='mt=0;33' egrep --color=auto --color=always 'MB|MiB|$' \
		| GREP_COLORS='mt=1;31' egrep --color=auto --color=always "GB|GiB|$"
}
smem() {
	doas /usr/bin/smem -k "$@" \
		| GREP_COLORS='mt=1;32' egrep --color=auto --color=always "K |$" \
		| GREP_COLORS='mt=0;33' egrep --color=auto --color=always 'M |$' \
		| GREP_COLORS='mt=1;31' egrep --color=auto --color=always "G |$"
}

# morse code, base64
mbt() {
	echo "morse code base64 enc/dec"
	local NUM_OUTPUT_COLOR=$(shuf -n1 <(echo 3; seq 5 6))
	while true; do
		read input"?$(tput bold)$(tput setf 1)> $(tput sgr0)"
		if [ -z $input ]; then
			local OUTPUT=$(xclip -selection clipboard -o | base64 -d | morse -d)
			echo "$(tput setf $NUM_OUTPUT_COLOR)${OUTPUT}$(tput sgr0)"
		else
			local OUTPUT=$(echo "$input" | morse -e | base64 -w0)
			echo "$OUTPUT" | xclip -selection clipboard
			echo "$(tput setf 2)${OUTPUT}$(tput sgr0)"
		fi
	done
}
mat() {
	if [ -z "$1" ]; then
		echo "convert text into audio file with morse code"
		read input"?> "
		[ -z "$input" ] \
			&& { echo "NO INPUT"; return 0; } \
			|| echo $input \
			| cwwav -o/tmp/cw.wav -f650 -w20 2>/dev/null
		opusenc --quiet /tmp/cw.wav cw_$(date -u +%FT%TZ).opus \
			&& echo $_
	else
		[ ! -f "$1" ] \
			&& { echo "\"$1\" not found"; exit 0; } \
			|| sox $1 -esigned-integer -b16 -r 22050 -t raw - 2>/dev/null \
			| multimon-ng -q -t raw -a MORSE_CW -
	fi
	rm -f /tmp/cw.wav
}

# xbps
#git -C ~/.cache/xlocate.git ls-tree --full-tree -r --name-only HEAD | rev | sed 's/_/ /; s/-/ /' | rev | column -t -R3 | sk --inline-info --layout=reverse-list --preview="git -C \"$HOME/.cache/xlocate.git\" show master:$(echo {1}-{2}_{3})" --preview-window=up:50% -m
fxls() {
	local HEADER="[Enter] Print selected [TAB] Toggle selection [ALT-F] View file [ALT-I] Info [ALT+H] Homepage"
	local REPO="$HOME/.cache/xlocate.git"
	git -C "$REPO" ls-tree --full-tree -r --name-only HEAD | rev | sed 's/_/ /; s/-/ /' | rev | column -t -R3 \
		| sk --inline-info \
			--prompt "pkg > " \
			--layout=reverse-list \
			--preview="git -C \"$REPO\" show master:$(echo {1}-{2}_{3})" \
			--preview-window=up:50% \
			-m \
			--bind "alt-f:execute[ git -C \"$REPO\" show master:$(echo {1}-{2}_{3}) | sk --layout=reverse-list --prompt '{1} > ' ]" \
			--bind "alt-i:execute[ xbps-query -v -R {1} | sk --layout=reverse-list --prompt '{1} > ' ]" \
			--bind 'alt-h:execute-silent[ xdg-open "$(xbps-query -p homepage -R {1})" & ]' \
			${1:+--query "$@"}
}

# stagit viewer
sgview() {
	[ -z "$1" ] \
		&& local URL=$(read -e "?URL: ") \
		|| local URL=$1
	curl --progress-bar "$URL" \
		| sed -n 's|^<a href="#.*" class="line" id=".*">.*</a>||p' \
		| recode html..ascii \
		| bat -n
}

# termbin, fiche
tb() {
	[ "$1" = "-i" ] && { local DATA=$(bash -i |& tee /dev/tty); echo "$DATA" | ansifilter | tb; return 0; }
	[ -z "$1" ] || { cat "$1" | tb; return 0; }
	zmodload zsh/net/tcp; ztcp ezup.dev 9999; cat >&$REPLY; cat <&$REPLY | tee >(xclip -selection clipboard); ztcp -c $REPLY
}

# logpaste.com
logpaste() {
	[ -s "$1" ] && { curl -F "_=@$@" http://logpaste.com; return 0; }
	curl -F '_=<-' http://logpaste.com
}

# gnuplot for lists of date in format of $(date +%F)
# sed -n 's/^: //p' ~/.zsh_history | cut -d: -f1 | xargs -I{} date +%F -d @{} | showplot
# xbps-query -m | xargs -L1 xbps-query -p install-date | awk '{print $1}' | showplot
# find ~/Downloads -type f 2>/dev/null | xargs -I{} stat -c %y '{}' 2>/dev/null | showplot
# tail -n+2 dump.csv | awk -F';' '{print $NF}' | showplot -c
# git log --oneline --pretty='%cs' | showplot
showplot() {
	zmodload zsh/datetime
	local DATA=("${(@f)$(sort /dev/stdin)}")
	local PFDAY=$(date -u -d "${DATA[1]} -1 day" +%F) # previous day of the first day
	local NLDAY=$(date -u -d "${DATA[-1]} +1 day" +%F) # next day of the last day
	local FDATE="${FDATE:-$PFDAY}"
	local LDATE="${LDATE:-$NLDAY}"
	local DURATION=$(( ( $(strftime -r %Y-%m-%d $LDATE) - $(strftime -r %Y-%m-%d $FDATE) ) / 86400 ))
	case "$1" in
		"-x")	local TYPE="set terminal x11"										;;
		"-p")	local TYPE="set terminal png size 960,720"								;;
		"-d")	local TYPE="set terminal png size 960,720; set output '| feh -'"					;;
		"-c")	local TYPE="set terminal png size 960,720; set output '| xclip -selection clipboard -t image/png'"	;;
		*)	local TYPE="set terminal dumb size 150,45; set autoscale"						;;
	esac
	printf '%s\n' "${DATA[@]}" | uniq -c | awk '{print $2,$1}' | gnuplot -background white -p -e "
		$TYPE;
		set xdata time;
		set timefmt '%Y-%m-%d';
		set xrange ['$FDATE':'$LDATE'];
		plot '-' using 1:2 with lines title '${#DATA[@]} items | $FDATE + ${DURATION}d = $LDATE'
		"
}

# https://unix.stackexchange.com/a/49066
zlibd() (printf "\x1f\x8b\x08\x00\x00\x00\x00\x00" | cat - "$@" | gzip -dc)

# Gentoo emerge history
mergelop() { qlop -c -M | sort -hrk2 | sed -r 's/:| average| for| merges| merge//g' | awk '$2 < 86400 { cmd = "date -u +%T -d@" $2; print $1, ((cmd | getline res)>0)? res : $2, $3; close(cmd) }' | column -t | sk --no-sort; }

ocr() {
	grim -g "$(slurp)" - | tesseract - - 2>/dev/null
}

day_of_week() {
	# https://stackoverflow.com/a/36389289/15763223
	rtc_timestamp=$(</sys/class/rtc/rtc0/since_epoch)
	rtc_date=$(</sys/class/rtc/rtc0/date)
	dow=$(((rtc_timestamp/86400+4)%7))
	week=(Sunday Monday Tuesday Wednesday Thursday Friday Saturday)
	echo "${rtc_date} ${week[@]:${dow}:1}"
}

calculator() { while true; do bc <<<"scale=3; $(read -e)"; done }

slugify() {
	# https://github.com/Mayeu/slugify/blob/master/slugify#L24
	if [ "$1" = "-h" ]; then
		echo "Usage: $0 [-i]"
	elif test -t 0; then
		read -e | $0 $@
	else
		sed -e 's/[^[:alnum:]]/-/g' \
			| tr -s '-' \
			| sed -e 's/-$//' \
			| ([ "$1" = "-i" ] && tr A-Z a-z || cat)
	fi
}
